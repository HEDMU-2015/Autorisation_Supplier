
CREATE TABLE user(
email varchar (255) UNIQUE,
password varchar(255)
);
alter table user add column login boolean  DEFAULT FALSE NOT NULL
//////////////////////



CREATE TABLE user(
email varchar (255) UNIQUE,
password varchar(255),
login boolean DEFAULT FALSE NOT NULL
);


CREATE TABLE role (
id INT IDENTITY,
name varchar(255)
);



CREATE TABLE permission(
id INT IDENTITY,
name varchar(255), 
);

CREATE TABLE organisation(
id INT IDENTITY,
name varchar(255),
parentID int 
);


CREATE TABLE userPermission (
id int GENERATED BY DEFAULT AS IDENTITY,
email varchar(255) NOT NULL,
permissionID int,
organisationID int,
foreign key (email) references user(email) on delete cascade,
foreign key (permissionID) references permission(id) on delete cascade,
foreign key (organisationID) references organisation(id) on delete cascade,
primary key ( email, permissionID, organisationID)

);


CREATE TABLE userRole (
id int  GENERATED BY DEFAULT AS IDENTITY,
email varchar(255) NOT NULL,
roleID int,
organisationID int,

foreign key (email) references user(email) on delete cascade,
foreign key (roleID) references role(id) on delete cascade,
foreign key (organisationID) references organisation(id) on delete cascade,
primary key ( email, roleID)
);


CREATE TABLE rolePermission (
id int  GENERATED BY DEFAULT AS IDENTITY,
roleID int,
permissionID int,

foreign key (roleID) references role(id) on delete cascade,
foreign key (permissionID) references permission(id) on delete cascade

);




//////// example
INSERT INTO organisation(name) VALUES('region'),

INSERT INTO organisation(name) VALUES('kommune'),

INSERT INTO "PUBLIC"."ORGANISATION"
(  "NAME", "PARENTID" )
VALUES ( 'Ung og Børn', 0)

UPDATE "PUBLIC"."ORGANISATION" SET NAME = 'Børn og Unge' where id = 2



SELECT ID, Name,(SELECT TOP 1 Name FROM Table organisation WHERE organisation.ParentID=ParentID) AS ParentName FROM Table

INSERT INTO "PUBLIC"."ORGANISATION"
(  "NAME", "PARENTID" )
VALUES ( 'Social / Sundhed og Beskæftigelse', 0)


INSERT INTO "PUBLIC"."ORGANISATION"
(  "NAME", "PARENTID" )
VALUES ( 'Herning Hospital', 4)


////// organisation with ParentID, parentName, childName
SELECT
ID
, name
, (CASE WHEN parent_name IS NULL THEN '-' ELSE parent_name END)
FROM organisation
, (SELECT 
parentID , name AS parent_name
FROM organisation) PARENT 
WHERE
organisation.id = PARENT.parentId


/////// organisation with childID, parentName, childName
SELECT
ID,
(CASE WHEN parent_name IS NULL THEN '-' ELSE parent_name END)
, name
FROM organisation
, (SELECT 
ID , name AS parent_name
FROM organisation) PARENT 
WHERE
organisation.parentid = PARENT.Id

/////// organisation with parentID, parentName, childID, childName

SELECT
parentID,
(CASE WHEN parent_name IS NULL THEN '-' ELSE parent_name END),
ID,
name
FROM organisation
, (SELECT 
ID , name AS parent_name
FROM organisation) PARENT 
WHERE
organisation.parentid = PARENT.Id


///// organisation with parentID = 0 shows the name and id of parent/children without join

SELECT parentID,(CASE WHEN parent_name IS NULL THEN '-' ELSE parent_name END), ID, name
FROM organisation, 
(SELECT ID , name AS parent_name FROM organisation) PARENT 
where organisation.parentid = parent.id  AND parent.id = 0;

///// or without case, just parent_name
SELECT
parentID,
parent_name,
ID,
name
FROM organisation
, 

(SELECT 
ID , name AS parent_name
FROm organisation) PARENT 


where organisation.parentid = parent.id  AND organisation.parentid = 0;



/////// organisation with no parentID (the higest organisation)
SELECT
parentID,
ID,
name
FROM organisation,
(SELECT id, name AS parent_name from organisation) parent
where organisation.id = parent.id AND organisation.parentID is NULL;

////// ????
SELECT
child_ID,
child_name,
ID,
name
FROM organisation,
(SELECT id as child_id, parentid as parent_id, name AS child_name from organisation) child
where organisation.id = child.parent_id;


SELECT parentid, parent_name, id, name FROM "PUBLIC"."ORGANISATION",
(Select id, name as parent_name from organisation) parent

 where organisation.parentid = parent.id AND parent.id = 0
 
 ///// show all with their parents
 SELECT parentid, parent_name, id, name FROM "PUBLIC"."ORGANISATION",
(Select id, name as parent_name from organisation) parent

 where organisation.parentid = parent.id
 
 ////////////////////////
 
 INSERT INTO "PUBLIC"."USER"
( "EMAIL" )
VALUES ( 'juy@me.com')

/////////////
 
 INSERT INTO "PUBLIC"."PERMISSION"
(  "NAME" )
VALUES (  'Medarbejder Oversigt')


////////

INSERT INTO "PUBLIC"."USERPERMISSION"
( "EMAIL", "PERMISSIONID", "ORGANISATIONID" )
VALUES ( 'juy@me.com',0 ,5 )
 
 
 //////
 
 SELECT email, organisationid, organisation.name, permissionid, permission.name FROM "PUBLIC"."USERPERMISSION"
inner join permission on userpermission.permissionid = permission.id
inner join organisation on userpermission.organisationid = organisation.id
 
 
 
 ////
 
 SELECT email, organisationid, organisation.name as organisationName, permissionid, permission.name as permissionName FROM userpermission
 inner join permission on userpermission.permissionid = permission.id
 inner join organisation on userpermission.organisationid = organisation.id
 where email = 'juy@me.com'
 
 ///
 UPDATE "PUBLIC"."USER" SET login = false where email = 'zeltres@hotmail.com' AND password = '123'
 
 
 
 //// rekulsiv
 WITH RECURSIVE tree (level, parent, child, name) AS (
SELECT 1, parentid AS parent, id AS child, name FROM organisation where id = 0
UNION
SELECT level + 1, parentid, id, name FROM organisation, tree WHERE parentid = child
) SELECT * FROM tree;
 
 